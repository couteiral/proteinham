from proteinham.lattice import TurnAncillaHamiltonian2D


def test_HPPH_2D():

    ham = TurnAncillaHamiltonian2D('HPPH')
    ham.build_exp()
    bitstrings = {
        '1110001':   -1.000000, 
        '1101001':   -1.000000, 
        '0100101':   -1.000000, 
        '0111101':   -1.000000, 
        '1000011':   -1.000000, 
        '1011011':   -1.000000, 
        '0010111':   -1.000000, 
        '0001111':   -1.000000, 
        '1000001':    3.000000, 
        '0100001':    3.000000, 
        '0010001':    3.000000, 
        '1010001':    3.000000, 
        '0001001':    3.000000, 
        '0101001':    3.000000, 
        '0000101':    3.000000, 
        '1000101':    3.000000, 
        '0010101':    3.000000, 
        '1110101':    3.000000, 
        '1011101':    3.000000, 
        '1111101':    3.000000, 
        '0000011':    3.000000, 
        '0100011':    3.000000, 
        '0001011':    3.000000, 
        '1101011':    3.000000, 
        '0111011':    3.000000, 
        '1111011':    3.000000, 
        '1010111':    3.000000, 
        '1110111':    3.000000, 
        '0101111':    3.000000, 
        '1101111':    3.000000, 
        '1011111':    3.000000, 
        '0111111':    3.000000, 
        '1100001':    4.000000, 
        '0110001':    4.000000, 
        '1001001':    4.000000, 
        '1011001':    4.000000, 
        '0111001':    4.000000, 
        '1111001':    4.000000, 
        '1100101':    4.000000, 
        '0110101':    4.000000, 
        '0001101':    4.000000, 
        '0101101':    4.000000, 
        '1101101':    4.000000, 
        '0011101':    4.000000, 
        '1100011':    4.000000, 
        '0010011':    4.000000, 
        '1010011':    4.000000, 
        '1110011':    4.000000, 
        '1001011':    4.000000, 
        '0011011':    4.000000, 
        '0000111':    4.000000, 
        '1000111':    4.000000, 
        '0100111':    4.000000, 
        '0110111':    4.000000, 
        '1001111':    4.000000, 
        '0011111':    4.000000, 
        '1100000':    5.000000, 
        '0110000':    5.000000, 
        '1001000':    5.000000, 
        '1011000':    5.000000, 
        '0111000':    5.000000, 
        '1111000':    5.000000, 
        '1100100':    5.000000, 
        '0110100':    5.000000, 
        '0001100':    5.000000, 
        '0101100':    5.000000, 
        '1101100':    5.000000, 
        '0011100':    5.000000, 
        '1100010':    5.000000, 
        '0010010':    5.000000, 
        '1010010':    5.000000, 
        '1110010':    5.000000, 
        '1001010':    5.000000, 
        '0011010':    5.000000, 
        '0000110':    5.000000, 
        '1000110':    5.000000, 
        '0100110':    5.000000, 
        '0110110':    5.000000, 
        '1001110':    5.000000, 
        '0011110':    5.000000, 
        '0000001':    7.000000, 
        '1010101':    7.000000, 
        '0101011':    7.000000, 
        '1111111':    7.000000, 
        '0011001':    9.000000, 
        '1001101':    9.000000, 
        '0110011':    9.000000, 
        '1100111':    9.000000, 
        '0011000':   10.000000,
        '1001100':   10.000000,
        '0110010':   10.000000,
        '1100110':   10.000000 
    }

    # Minimum and maximum values are ok
    for bstring, energy in bitstrings.items():
        eigval = ham.test_bitstring(bstring)
        assert eigval == energy

def test_HPPHP_2D()

    ham = TurnAncillaHamiltonian2D('HPPHP')
    ham.build_exp()

    bitstrings = {
        '0100100000111':     -1.000000,
        '1000010000111':     -1.000000,
        '1110001000111':     -1.000000,
        '0010111000111':     -1.000000,
        '1101000100111':     -1.000000,
        '0001110100111':     -1.000000,
        '0111101100111':     -1.000000,
        '1011011100111':     -1.000000,
        '1110000001111':     -1.000000,
        '1101000001111':     -1.000000,
        '0100101001111':     -1.000000,
        '0111101001111':     -1.000000,
        '1000010101111':     -1.000000,
        '1011010101111':     -1.000000,
        '0010111101111':     -1.000000,
        '0001111101111':     -1.000000,
        '0000000000000':      0.000000,
        '1010101000000':      0.000000,
        '0101010100000':      0.000000,
        '1111111100000':      0.000000,
        '1000000001100':      0.000000,
        '0100000001100':      0.000000,
        '0010000001100':      0.000000,
        '0001000001100':      0.000000,
        '0000100001100':      0.000000,
        '1010100001100':      0.000000,
        '0000010001100':      0.000000,
        '0101010001100':      0.000000,
        '0000001001100':      0.000000,
        '1010001001100':      0.000000,
        '1000101001100':      0.000000,
        '0010101001100':      0.000000,
        '1110101001100':      0.000000,
        '1011101001100':      0.000000,
        '1010111001100':      0.000000,
        '1111111001100':      0.000000,
        '0000000101100':      0.000000,
        '0101000101100':      0.000000,
        '0100010101100':      0.000000,
        '1011010000000':   1536.000000,
        '1101001000000':   1536.000000,
        '0001111000000':   1536.000000,
        '1110000100000':   1536.000000,
        '0010110100000':   1536.000000,
        '0100101100000':   1536.000000,
        '1000011100000':   1536.000000,
        '1111000000001':   1541.000000,
        '1101100000001':   1541.000000,
        '1110010000001':   1541.000000,
        '0111001000001':   1541.000000,
        '0101101000001':   1541.000000,
        '0100111000001':   1541.000000,
        '1011000100001':   1541.000000,
        '1010010100001':   1541.000000,
        '1000110100001':   1541.000000,
        '0001101100001':   1541.000000,
        '0010011100001':   1541.000000,
        '0000111100001':   1541.000000,
        '1111000000000':   1542.000000,
        '1101100000000':   1542.000000,
        '1110010000000':   1542.000000,
        '0111001000000':   1542.000000,
        '0101101000000':   1542.000000,
        '0100111000000':   1542.000000,
        '1011000100000':   1542.000000,
        '1010010100000':   1542.000000,
        '1000110100000':   1542.000000,
        '0001101100000':   1542.000000,
        '0010011100000':   1542.000000,
        '0000111100000':   1542.000000,
        '0110110000001':   1547.000000,
        '1001110000001':   1547.000000,
        '0011110000001':   1547.000000,
        '1100011000001':   1547.000000,
        '1001011000001':   1547.000000,
        '0011011000001':   1547.000000,
        '1100100100001':   1547.000000,
        '0110100100001':   1547.000000,
        '0011100100001':   1547.000000,
        '1100001100001':   1547.000000,
        '0110001100001':   1547.000000,
        '1001001100001':   1547.000000,
        '0110110000000':   1548.000000,
        '1001110000000':   1548.000000,
        '0011110000000':   1548.000000,
        '1100011000000':   1548.000000,
        '1001011000000':   1548.000000,
        '0011011000000':   1548.000000,
        '1100100100000':   1548.000000,
        '0110100100000':   1548.000000,
        '0011100100000':   1548.000000,
        '1100001100000':   1548.000000,
        '0110001100000':   1548.000000,
        '1001001100000':   1548.000000,
        '1100110000001':   1553.000000,
        '0110011000001':   1553.000000,
        '1001100100001':   1553.000000,
        '0011001100001':   1553.000000,
        '1100110000000':   1554.000000,
        '0110011000000':   1554.000000,
        '1001100100000':   1554.000000,
        '0011001100000':   1554.000000
    }

    # Minimum and maximum values are ok
    for bstring, energy in bitstrings.items():
        eigval = ham.test_bitstring(bstring)
        assert eigval == energy
